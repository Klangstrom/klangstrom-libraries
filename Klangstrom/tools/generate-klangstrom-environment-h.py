#!/usr/bin/env python3

# Define architectures and boards with their corresponding values
archs = {
    '':                 '0x10',
    'RESERVED':         '0x20',
    'STM32':            '0x30',
    'EMU':              '0x40',
    'MASK':             '0xF0'
}

boards = {
    '':                 '0x01',
    'GENERIC':          '0x02',
    'KLST_CORE':        '0x03',
    'KLST_TINY':        '0x04',
    'KLST_SHEEP':       '0x05',
    'KLST_PANDA':       '0x06',
    'KLST_CATERPILLAR': '0x07',
    'MASK':             '0x0F'
}

# Output file
header_file = "../src/KlangstromEnvironment.h"

# Copyright notice
copyright_notice = """/*
 * Klangstrom
 *
 * This file is part of the *wellen* library (https://github.com/dennisppaul/wellen).
 * Copyright (c) 2024 Dennis P Paul.
 *
 * This library is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, version 3.
 *
 * This library is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 * General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program. If not, see <http://www.gnu.org/licenses/>.
 */

 /* --- THIS FILE IS AUTOGENERATED --- */
"""

with open(header_file, 'w') as file:
    file.write(copyright_notice + "\n")
    file.write("#pragma once\n\n")
    
    file.write("// #define KLST_DEBUG_ENVIRONMENT\n\n")
    
    # Write architecture defines
    all_keys = [f"KLST_ARCH_{key}" for key in archs] + [f"KLST_BOARD_{key}" for key in boards]
    max_len = max(len(key) for key in all_keys)  # find the longest key length
    for key, value in archs.items():
        key_formatted = f"KLST_ARCH_{key}" if key else "KLST_ARCH"
        file.write(f"#define {key_formatted.ljust(max_len)} {value}\n")
    
    file.write("\n")
    
    # Write board defines
    for key, value in boards.items():
        key_formatted = f"KLST_BOARD_{key}" if key else "KLST_BOARD"
        file.write(f"#define {key_formatted.ljust(max_len)} {value}\n")
    
    file.write("\n#ifndef KLST_ENV\n")
    file.write('#error "define KLST_ENV with (KLST_ARCH | KLST_BOARD) or (KLST_ARCH + KLST_BOARD) e.g KLST_PANDA on STM32: (KLST_BOARD_KLST_PANDA + KLST_ARCH_STM32) = (0x20 + 0x05) = 0x25"\n')
    file.write("\n#else\n\n")

    # Conditional defines and warnings for skipping
    arch_keys = list(archs.keys())[1:-1]  # Skip the base and MASK entries
    board_keys = list(boards.keys())[1:-1]  # Skip the base and MASK entries
    for board in board_keys:
        file.write(f"// {board}\n\n")
        for arch in arch_keys:
            define = f"{board}_{arch}"
            file.write(f"#if ((KLST_ENV & KLST_BOARD_MASK) == KLST_BOARD_{board}) && ((KLST_ENV & KLST_ARCH_MASK) == KLST_ARCH_{arch})\n")
            file.write(f"#define KLST_ARCH_IS_{arch}\n")
            file.write(f"#define {define} ")
            file.write(f"// = ")
            arch_value = int(archs[arch], 16) 
            board_value = int(boards[board], 16)
            combined_value = arch_value | board_value
            file.write(hex(combined_value))
            file.write(f"\n")
            file.write(f"#ifdef KLST_DEBUG_ENVIRONMENT\n")
            file.write(f'#warning "+++ klangstrom platform: {define}"\n')
            file.write(f"#endif // KLST_DEBUG_ENVIRONMENT\n")
            file.write(f"#endif // {define}\n\n")

    file.write("#endif // KLST_ENV\n")